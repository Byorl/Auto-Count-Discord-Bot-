import time
import random
import requests
import re
import math

TOKEN = 'DISCORD_TOKEN'
GUILD_ID = 'SERVER_ID'
CHANNEL_ID = 'CHANNEL_ID'
USER_ID = 'PERSONAL_USER_ID'

BASE_URL = 'https://discord.com/api/v10'

headers = {
    'Authorization': TOKEN
}

def get_last_message(channel_id):
    url = f"{BASE_URL}/channels/{channel_id}/messages?limit=1"
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        messages = response.json()
        if messages:
            return messages[0]
        return None
    except requests.exceptions.RequestException as e:
        print(f"Failed to fetch last message: {e}")
        return None

def send_message(channel_id, content):
    url = f"{BASE_URL}/channels/{channel_id}/messages"
    data = {'content': content}
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        print(f"Sent message: {content}")
    except requests.exceptions.RequestException as e:
        print(f"Failed to send message: {e}")

def send_typing_action(channel_id):
    url = f"{BASE_URL}/channels/{channel_id}/typing"
    try:
        response = requests.post(url, headers=headers)
        response.raise_for_status()
        print("Simulating typing action...")
    except requests.exceptions.RequestException as e:
        print(f"Failed to simulate typing action: {e}")

def evaluate_math_expression(expression):
    try:
        expression = expression.replace('^', '**')

        sqrt_matches = re.finditer(r'sqrt\((\d+)\)', expression)
        for match in sqrt_matches:
            number = int(match.group(1))
            sqrt_value = math.sqrt(number)
            expression = expression.replace(match.group(0), str(sqrt_value))

        result = eval(expression)
        return result
    except Exception as e:
        print(f"Failed to evaluate expression: {expression}. Error: {e}")
        return None


def find_previous_number(last_message, channel_id):
    previous_message = last_message
    while previous_message:
        if previous_message.get('content', '').startswith("has reached level"):
            return previous_message
        previous_message = get_last_message(channel_id)
    return None

def main():
    while True:
        last_message = get_last_message(CHANNEL_ID)
        if last_message:
            last_author_id = last_message.get('author', {}).get('id')
            last_content = last_message.get('content', '')

            print(f"Last message: {last_content} (Author ID: {last_author_id})")

            if last_author_id != USER_ID:
                if not re.match(r'^[0-9+\-*/()^ sqrt]+', last_content):
                    previous_message = get_last_message(CHANNEL_ID)
                    if previous_message:
                        last_content = previous_message.get('content', '')
                    else:
                        last_content = ""

                if "has reached level" in last_content:
                    previous_message = find_previous_number(last_message, CHANNEL_ID)
                    if previous_message:
                        last_content = previous_message.get('content', '')
                    else:
                        last_content = ""

                if re.match(r'^[0-9+\-*/()^ sqrt.]+$', last_content):
                    next_number = evaluate_math_expression(last_content)
                    if next_number is not None:
                        next_number += 1
                        print(f"Calculated next number: {next_number}")
                    else:
                        next_number = None
                elif last_content.isdigit():
                    next_number = int(last_content) + 1
                    print(f"Next number to send: {next_number}")
                else:
                    next_number = None

                if next_number is not None:
                    delay = random.randint(3, 5)
                    print(f"Waiting for {delay} seconds before simulating typing...")
                    time.sleep(delay)

                    send_typing_action(CHANNEL_ID)

                    typing_delay = random.randint(1, 3)
                    print(f"Thinking for {typing_delay} seconds before sending the message...")
                    time.sleep(typing_delay)

                    updated_last_message = get_last_message(CHANNEL_ID)

                    if updated_last_message and updated_last_message['id'] == last_message['id']:
                        print(f"Still safe to send {next_number}. Sending now...")
                        send_message(CHANNEL_ID, str(next_number))
                    else:
                        print("Another message was sent in the meantime. Skipping this turn.")

        time.sleep(1)

if __name__ == "__main__":
    main()
